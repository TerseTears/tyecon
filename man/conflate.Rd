% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/conflate.R
\name{conflate}
\alias{conflate}
\title{Combine generic method interfaces}
\usage{
conflate(generic_spec)
}
\arguments{
\item{generic_spec}{[\code{call}] Generic function as applied to arguments
shared between all methods to be combined.}
}
\value{
Function with additional class \emph{conflate} with arguments being

\if{html}{\out{<div class="sourceCode">}}\preformatted{conflate_func(generic_spec_args, ..., evaluate = TRUE)
}\if{html}{\out{</div>}}

Where \code{...} specifies additional arguments to be supplied in the form
\code{object_class.arg}. The \code{evaluate} argument is useful for debugging purposes.
}
\description{
\code{conflate} combines methods for any S3 standard generic allowing arguments
of various methods to be specified in a single function that it returns.
}
\section{Combining Methods}{
The generic_spec argument is the generic function as applied to
shared arguments between methods that are to be combined. Once this is
decided, all additional arguments passed to the generated function need to
be of the form \code{object_class.arg} that are arguments unique to each method
as dispatched for each object class.
}

\examples{
# first construct two models
glm.model <- glm(Sepal.Length ~ Sepal.Width, data = iris)
lm.model <- lm(Sepal.Length ~ Sepal.Width, data = iris)

# create summary with extra object arguments using `conflate`
(conflated_summary <- conflate(summary(x)))

purrr::map(
  list(glm.model, lm.model),
  ~ conflated_summary(.,
    lm.correlation = TRUE, glm.correlation = TRUE,
    glm.symbolic.cor = TRUE
  )
)

# alternatively, you could supply `correlation` as a default in conflate itself
(conflated_summary <- conflate(summary(x, correlation = TRUE)))

purrr::map(
  list(glm.model, lm.model),
  ~ conflated_summary(., lm.symbolic.cor = TRUE)
)
}
\seealso{
Other function assemblers: 
\code{\link{convoke}()}
}
\concept{function assemblers}

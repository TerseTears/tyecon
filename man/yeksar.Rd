% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dsl.R
\name{yeksar}
\alias{yeksar}
\title{Unify functions interfaces}
\usage{
yeksar(...)
}
\arguments{
\item{...}{First element is the desired unifying interface. Remaining
elements are all the various specifications for function argument
transformations.}
}
\value{
Function with additional class \emph{yeksar} with arguments being\preformatted{yeksar_func(specified_args, interface, evaluate = TRUE, ...)
}

The \code{evaluate}
argument is useful for debugging purposes. Extra arguments can be passed in
the format \code{interface.arg}.
}
\description{
\code{yeksar} unifies functions along a single specification using
statements on function argument transformations that would be needed. The
result is a single function whose \emph{interface} can be changed simply by
changing the respective argument in the generated function.
}
\section{Unifying Functions}{
\subsection{Specifying the unifying interface}{

The unifying interface needs to be specified in the format\preformatted{..(arg1 = default1, arg2 = default2, etc.)
}

Where the \code{..} prefix and parentheses are required and an error is
thrown otherwise. The equality sign in arguments specifications is also
necessary. Simply omit the default value on the RHS if not needed.
}

\subsection{Specifying function argument transformations}{

Transformations follow the formula format\preformatted{func1(func1arg1 = transformed_arg1, func1arg2 = transformed_arg2) ~
postprocess(result)
}

Essentially, pass the function as if it is to take
arguments from the unified function.
\subsection{Postprocessing function}{

The postprocess function on the right of the formula specifies what
postprocessing is required on the result of applying \code{func1}. It is to be
specified similarly to how functions in \code{purrr::map} are specified (that is
by the \code{.} and \code{.x} syntax.
}

}
}

\section{Composing functions}{
It is also possible to progressively add functions to a yeksar function
simply by adding to the yeksar function the new specifications:\preformatted{yeksar_func + (func_spec ~ postfunc)
}
}


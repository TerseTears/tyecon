% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/monadic.R
\name{\%$>\%}
\alias{\%$>\%}
\title{Piping environment for transforming data into new data format}
\usage{
data \%$>\% code
}
\arguments{
\item{data}{[R \code{object}] Any object, specifically data or results of
previous pipes.}

\item{code}{[individual \code{bindings} and R \code{commands}] Instructions
wrapped in curly braces to encapsualte the context of the pipe.}
}
\value{
list with fields specified by any assignments inside \code{code}.
}
\description{
\verb{\%$>\%} construct operator allows taking apart the elements of a data to build
a new data type more quickly. This is done by data masking and access to the
original object by the \code{.} pronoun from \code{magrittr}. Each line is a component
of the new data. If the line is an assignment, the new component name is the
assigned variable name, otherwise, its position is determined by how many
previous variables have been assigned. See examples.
}
\examples{
# use the pipe to build data in steps:
testdf <- tibble::tribble(
  ~x, ~y,
  3, 2,
  5, 9,
  12, 8
)
testdf \%$>\% {
  minx <- min(x)
  miny <- min(y)
  minxy <- min(minx, miny)
}

# use the dot pronoun to refer to the entire data
c(5, 9, 10) \%$>\% {
  min <- min(.)
  max <- max(.)
  whole <- .
}

# use curly braces for multiline instructions
testdf \%$>\% {
  minxy <- {
    minx <- min(x)
    miny <- min(y)
    min(minx, miny)
  }
  maxall <- max(.)
  minall <- min(.)
}

# Unnamed instructions can only be accessed by position
val <- testdf \%$>\% {
  min(x)
  xval <- x
  min(y)
}
val$xval
val[[1]]
val[[3]]
}
\seealso{
Other result assemblers: 
\code{\link{\%->\%}()},
\code{\link{\%to\%}()},
\code{\link{conserve}()}
}
\concept{result assemblers}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{\%to\%}
\alias{\%to\%}
\title{Pass object to multiple directives}
\usage{
obj \%to\% blocks
}
\arguments{
\item{obj}{Object to be passed to multiple instructions}

\item{blocks}{formula-like instructions wrapped in a pair of braces \code{{}}.}
}
\value{
Dataframe with column names being the formula LHS values, and a
single row containing the results of each column's respective instructions.
}
\description{
\verb{\%to\%} allows a single object to be passed through multiple commands, and for
the results to be returned in a single dataframe.
}
\section{Passing object to multiple instructions:}{
The syntax to use for this purpose is to have the object on the LHS of the
\verb{\%to\%} operator, and wrap all instructions in a braces pair that effectively
acts as multiple lines of regular R code. However, each line needs to be
named, in a formula syntax fashion:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{obj \%to\% \{
 inst1 ~ inst1expressions(.)
 inst2 ~ inst2expressions(.)
\}
}\if{html}{\out{</div>}}

The right side of the formula is to be specified similar to how instructions
in \code{purrr:map} are, that is, by the \code{.}, \code{.x} syntax.

If multiple lines are needed for each instruction, one can simply wrap them
in yet another braces pair.
}

\examples{
# returning multiple analysis on same object
testvec <- c(1, 2, 3, 7)
testvec \%to\% {
  mean ~ mean(.)
  sd ~ sd(.)
}

# use nested braces for longer expressions
testvec \%to\% {
  mean2 ~ {
    x <- . + 3
    mean(x * .)
  }
  sd ~ sd(.)
}

# vector results are stored as lists in the dataframe
testvec \%to\% {
  itself ~ .
  itsmean ~ mean(.)
}

testvec \%to\% {
  itself ~ .
  itsextra ~ c(2, .)
}
}
\seealso{
Other result assemblers: 
\code{\link{\%$>\%}()},
\code{\link{\%->\%}()},
\code{\link{\%<-\%}()},
\code{\link{conserve}()},
\code{\link{control}()}
}
\concept{result assemblers}
